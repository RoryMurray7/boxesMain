// This is where i hardcoded the response during testing. The const apiResponse is generated by gpt4o,
// but not within this configDotenv. I couldnt get the api to output in proper json format so for the
// prototype i resorted to generating each part independently, this is very inefficient and costly for
// openai tokens but it is satisfactory for the prototype. See uncommented code below.

// const apiResponse = {
//   summary:
//     "The overall sentiment regarding the product is positive, with users appreciating its sleek design, performance, and portability. However, there are consistent concerns about overheating, limited port selection, and noise from cooling systems during intensive use.",
//   total_responses: 10,
//   average_rating: 3.7,
//   average_age: "18-25",
//   actionable_insights: [
//     "Enhance the cooling system to address overheating issues and reduce noise during intensive tasks, as multiple users reported the device heating up and being noisy.",
//     "Expand the port selection to accommodate more peripherals, as several users found the current selection limited.",
//     "Improve the device's performance when running multiple applications simultaneously, as some users experienced lag and underperformance during such tasks.",
//   ],
// };

// function displayApiResponse(response) {
//   document.getElementById("summary").textContent = response.summary;
//   document.getElementById("total_responses").textContent =
//     response.total_responses;
//   document.getElementById("average_rating").textContent =
//     response.average_rating;
//   document.getElementById("average_age").textContent = response.average_age;

//   const insightsContainer = document.getElementById("actionable_insights");
//   response.actionable_insights.forEach((insight) => {
//     const li = document.createElement("li");
//     li.textContent = insight;
//     insightsContainer.appendChild(li);
//   });
// }

// document.addEventListener("DOMContentLoaded", function () {
//   displayApiResponse(apiResponse);
// });

//this is claude code in companion with fileupload.js
// In dashboard.js
const FILE_CONTENT = (() => {
  const storedContent = sessionStorage.getItem("FILE_CONTENT");
  if (storedContent) {
    try {
      const parsedContent = JSON.parse(storedContent);
      return parsedContent.content;
    } catch (error) {
      console.error("Error parsing stored file content:", error);
      return null;
    }
  }
  return null;
})();

// You can now use FILE_CONTENT throughout your dashboard.js
// Example usage:
if (FILE_CONTENT) {
  console.log("File content retrieved:", FILE_CONTENT);
  // Use FILE_CONTENT in your API calls or other logic
} else {
  console.log("No file content found");
}

// A basic Markdown parser function
function parseMarkdown(text) {
  // Convert Markdown to HTML:
  text = text.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>"); // Bold
  text = text.replace(/\*(.*?)\*/g, "<em>$1</em>"); // Italics
  text = text.replace(/^# (.*?)$/gm, "<h3>$1</h3>"); // Heading (h2)
  text = text.replace(/\n/g, "<br>"); // Line break
  return text;
}

// This code worked for one output box in an earlier version, im just going to copy it for each box.
const systemMessage1 = `
Analyze JSON files containing individual survey responses about a product. Summarize the overall consensus of the feedback.

# Steps

1. **Identify Key Themes**: Examine the feedback for repetitive comments or common themes to determine the overall sentiment.
2. **Consensus Summary**: Summarize the general consensus in a paragraph.

# Output Format
- A couple of lines of text summarizing the general consensus.

# Notes
- Maintain objectivity and avoid drawing unsupported conclusions based only on a couple of responses.
- omit any information from the output that could identify a person such as their email or name
- dont use any markup in your output
`;

const systemMessage2 = `
Analyze JSON files containing individual survey responses about a product. Provide three actionable insights for product improvement.

# Steps
1. **Identify Key Themes**: Examine the feedback for repetitive comments or common themes to determine the overall sentiment.
3. **Actionable Insights**: Identify and list three clear, actionable insights derived from the feedback to improve the product. Ensure each insight is supported by the feedback data.

# Output Format
- A list of three actionable insights without any additional titles or headings.

# Notes

- Ensure the insights are directly actionable and relevant to product improvement.
- Maintain objectivity and avoid drawing unsupported conclusions based only on a couple of responses.
- omit any information from the output that could identify a person such as their email or name
- Wrap text in * for bold, ** for italic and # for subtitles
`;

document.addEventListener("DOMContentLoaded", function () {
  fetchCurrentAgeDemographic();
});

async function fetchSummary() {
  const summaryElement = document.getElementById("summary");
  summaryElement.innerText = "Loading...";

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        temperature: 0.8,
        max_tokens: 5000,
        messages: [
          { role: "user", content: FILE_CONTENT },
          { role: "system", content: systemMessage1 },
        ],
      }),
    });

    if (!response.ok) {
      throw new Error("Failed to fetch response from API");
    }

    const data = await response.json();
    summaryElement.innerText = data.choices[0].message.content;
  } catch (error) {
    summaryElement.innerHTML = `<p style="color: red;">Error: ${error.message}</p>`;
  }
}

async function fetchInsights() {
  const responseBox = document.getElementById("actionable_insights");
  responseBox.innerText = "Loading...";

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        temperature: 0.8,
        max_tokens: 5000,
        messages: [
          { role: "user", content: FILE_CONTENT },
          { role: "system", content: systemMessage2 },
        ],
      }),
    });

    if (!response.ok) {
      throw new Error("Failed to fetch response from API");
    }

    const data = await response.json();
    const openAiResponse = data.choices[0].message.content;
    const openAiResponseHtml = parseMarkdown(openAiResponse);

    responseBox.innerHTML = openAiResponseHtml; // Display as HTML
  } catch (error) {
    summaryElement.innerHTML = `<p style="color: red;">Error: ${error.message}</p>`;
  }
}

async function fetchResponseCount() {
  const summaryElement = document.getElementById("total_responses");
  summaryElement.innerText = "Loading...";

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        temperature: 0.8,
        max_tokens: 5000,
        messages: [
          { role: "user", content: FILE_CONTENT },
          {
            role: "system",
            content:
              "Analyse JSON files containing individual survey responses. Count the total number of responses and output only the numerical value, with no additional text or formatting.",
          },
        ],
      }),
    });

    if (!response.ok) {
      throw new Error("Failed to fetch response from API");
    }

    const data = await response.json();
    summaryElement.innerText = data.choices[0].message.content;
  } catch (error) {
    summaryElement.innerHTML = `<p style="color: red;">Error: ${error.message}</p>`;
  }
}

async function fetchAverageScore() {
  const summaryElement = document.getElementById("average_rating");
  summaryElement.innerText = "Loading...";

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        temperature: 0.8,
        max_tokens: 5000,
        messages: [
          { role: "user", content: FILE_CONTENT },
          {
            role: "system",
            content:
              "Analyse JSON files containing individual survey responses. Read each response and calculate the average rating. Output only the numerical value, rounded to 1 decimal place, with no additional text or formatting.",
          },
        ],
      }),
    });

    if (!response.ok) {
      throw new Error("Failed to fetch response from API");
    }

    const data = await response.json();
    summaryElement.innerText = data.choices[0].message.content;
  } catch (error) {
    summaryElement.innerHTML = `<p style="color: red;">Error: ${error.message}</p>`;
  }
}

async function fetchCurrentAgeDemographic() {
  const summaryElement = document.getElementById("average_age");
  summaryElement.innerText = "Loading...";
  fetchSummary();
  fetchInsights();
  fetchResponseCount();
  fetchAverageScore();

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        temperature: 0.8,
        max_tokens: 5000,
        messages: [
          { role: "user", content: FILE_CONTENT },
          {
            role: "system",
            content:
              "Analyse JSON files containing individual survey responses. Determine the most frequently occurring age_range and output only its value, with no additional text or formatting.",
          },
        ],
      }),
    });

    if (!response.ok) {
      throw new Error("Failed to fetch response from API");
    }

    const data = await response.json();
    summaryElement.innerText = data.choices[0].message.content;
  } catch (error) {
    summaryElement.innerHTML = `<p style="color: red;">Error: ${error.message}</p>`;
  }
}
